// 按钮组件

import { Styles } from "../globals/styles.slint";

export component Button {
    in property <string> text: "按钮";
    in property <image> icon;
    in property <string> style: "filled"; // "filled", "outlined", "text", "icon"
    in property <bool> enabled: true;
    in property <bool> loading: false;
    
    callback clicked <=> touch-area.clicked;
    
    min-width: 80px;
    min-height: Styles.sizes.h-md;
    
    property <float> scale: 1.0;
    property <float> button-opacity: root.enabled ? 1.0 : 0.5;
    
    states [
        pressed when touch-area.pressed: {
            scale: 0.95;
            button-opacity: 0.8;
        }
        hover when touch-area.has-hover && root.enabled: {
            scale: 1.02;
            background.background: get-hover-color();
        }
        disabled when !root.enabled: {
            button-opacity: 0.5;
        }
    ]
    
    animate scale {
        duration: 150ms;
        easing: ease-out;
    }
    animate button-opacity {
        duration: 200ms;
        easing: ease-out;
    }
    
    function get-background-color() -> color {
        if (root.style == "filled") {
            return Styles.primary;
        } else if (root.style == "outlined") {
            return transparent;
        } else if (root.style == "text") {
            return transparent;
        } else if (root.style == "icon") {
            return transparent;
        }
        return Styles.primary;
    }
    
    function get-hover-color() -> color {
        if (root.style == "filled") {
            return Styles.primary-hover;
        } else {
            return Styles.primary.with-alpha(0.1);
        }
    }
    
    function get-text-color() -> color {
        if (root.style == "filled") {
            return Styles.text-on-primary;
        } else {
            return Styles.primary;
        }
    }
    
    background := Rectangle {
        background: get-background-color();
        border-radius: root.style == "icon" ? self.width / 2 : Styles.sizes.r-md;
        border-width: root.style == "outlined" ? 1px : 0px;
        border-color: Styles.outline;
        opacity: button-opacity;
        
        drop-shadow-blur: root.style == "filled" ? 4px : 0px;
        drop-shadow-color: Styles.scrim.with-alpha(0.15);
        drop-shadow-offset-y: 2px;
        
        // 缩放变换
        width: parent.width * scale;
        height: parent.height * scale;
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
    }
    
    touch-area := TouchArea {
        enabled: root.enabled;
    }
    
    HorizontalLayout {
        alignment: LayoutAlignment.center;
        padding-left: Styles.sizes.p-md;
        padding-right: Styles.sizes.p-md;
        padding-top: Styles.sizes.p-sm;
        padding-bottom: Styles.sizes.p-sm;
        spacing: 8px;
        
        if root.icon.width > 0: Image {
            source: root.icon;
            width: 16px;
            height: 16px;
            colorize: get-text-color();
        }
        
        if root.text != "": text-element := Text {
            text: root.text;
            color: get-text-color();
            font-family: Styles.font-family;
            font-size: Styles.sizes.font;
            font-weight: 500;
            vertical-alignment: center;
            horizontal-alignment: center;
            opacity: 1.0;
        }
    }
}
